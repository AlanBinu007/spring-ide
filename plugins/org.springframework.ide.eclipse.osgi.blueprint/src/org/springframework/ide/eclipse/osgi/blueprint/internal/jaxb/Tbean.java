//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.11.05 at 05:47:27 PM CET 
//

package org.springframework.ide.eclipse.osgi.blueprint.internal.jaxb;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlAnyElement;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.namespace.QName;

import org.w3c.dom.Element;

/**
 * 
 * 
 * The type definition for a <bean> component. The <bean> attributes provide the
 * characteristics for how to create a bean instance. Constructor arguments and
 * injected properties are specified via child <argument> and
 * <property> elements.
 * 
 * 
 * 
 * <p>
 * Java class for Tbean complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType name="Tbean">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.osgi.org/xmlns/blueprint/v1.0.0}Tcomponent">
 *       &lt;group ref="{http://www.osgi.org/xmlns/blueprint/v1.0.0}GbeanElements"/>
 *       &lt;attribute name="class" type="{http://www.osgi.org/xmlns/blueprint/v1.0.0}Tclass" />
 *       &lt;attribute name="init-method" type="{http://www.osgi.org/xmlns/blueprint/v1.0.0}Tmethod" />
 *       &lt;attribute name="destroy-method" type="{http://www.osgi.org/xmlns/blueprint/v1.0.0}Tmethod" />
 *       &lt;attribute name="factory-method" type="{http://www.osgi.org/xmlns/blueprint/v1.0.0}Tmethod" />
 *       &lt;attribute name="factory-ref" type="{http://www.osgi.org/xmlns/blueprint/v1.0.0}Tidref" />
 *       &lt;attribute name="scope" type="{http://www.osgi.org/xmlns/blueprint/v1.0.0}Tscope" />
 *       &lt;anyAttribute processContents='lax' namespace='##other'/>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Tbean", propOrder = { "description", "argumentOrPropertyOrAny" })
@XmlSeeAlso({ TinlinedBean.class })
public class Tbean extends Tcomponent {

	protected Tdescription description;
	@XmlElementRefs({
			@XmlElementRef(name = "argument", namespace = "http://www.osgi.org/xmlns/blueprint/v1.0.0", type = JAXBElement.class, required = false),
			@XmlElementRef(name = "property", namespace = "http://www.osgi.org/xmlns/blueprint/v1.0.0", type = JAXBElement.class, required = false) })
	@XmlAnyElement(lax = true)
	protected List<Object> argumentOrPropertyOrAny;
	@XmlAttribute(name = "class")
	@XmlJavaTypeAdapter(CollapsedStringAdapter.class)
	protected String clazz;
	@XmlAttribute(name = "init-method")
	@XmlJavaTypeAdapter(CollapsedStringAdapter.class)
	protected String initMethod;
	@XmlAttribute(name = "destroy-method")
	@XmlJavaTypeAdapter(CollapsedStringAdapter.class)
	protected String destroyMethod;
	@XmlAttribute(name = "factory-method")
	@XmlJavaTypeAdapter(CollapsedStringAdapter.class)
	protected String factoryMethod;
	@XmlAttribute(name = "factory-ref")
	@XmlJavaTypeAdapter(CollapsedStringAdapter.class)
	protected String factoryRef;
	@XmlAttribute(name = "scope")
	protected String scope;
	@XmlAnyAttribute
	private Map<QName, String> otherAttributes = new HashMap<QName, String>();

	/**
	 * Gets the value of the description property.
	 * 
	 * @return possible object is {@link Tdescription }
	 * 
	 */
	public Tdescription getDescription() {
		return description;
	}

	/**
	 * Sets the value of the description property.
	 * 
	 * @param value
	 *            allowed object is {@link Tdescription }
	 * 
	 */
	public void setDescription(Tdescription value) {
		this.description = value;
	}

	/**
	 * Gets the value of the argumentOrPropertyOrAny property.
	 * 
	 * <p>
	 * This accessor method returns a reference to the live list, not a
	 * snapshot. Therefore any modification you make to the returned list will
	 * be present inside the JAXB object. This is why there is not a
	 * <CODE>set</CODE> method for the argumentOrPropertyOrAny property.
	 * 
	 * <p>
	 * For example, to add a new item, do as follows:
	 * 
	 * <pre>
	 * getArgumentOrPropertyOrAny().add(newItem);
	 * </pre>
	 * 
	 * 
	 * <p>
	 * Objects of the following type(s) are allowed in the list {@link Object }
	 * {@link JAXBElement }{@code <}{@link Targument }{@code >}
	 * {@link JAXBElement }{@code <}{@link Tproperty }{@code >} {@link Element }
	 * 
	 * 
	 */
	public List<Object> getArgumentOrPropertyOrAny() {
		if (argumentOrPropertyOrAny == null) {
			argumentOrPropertyOrAny = new ArrayList<Object>();
		}
		return this.argumentOrPropertyOrAny;
	}

	/**
	 * Gets the value of the clazz property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getClazz() {
		return clazz;
	}

	/**
	 * Sets the value of the clazz property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setClazz(String value) {
		this.clazz = value;
	}

	/**
	 * Gets the value of the initMethod property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getInitMethod() {
		return initMethod;
	}

	/**
	 * Sets the value of the initMethod property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setInitMethod(String value) {
		this.initMethod = value;
	}

	/**
	 * Gets the value of the destroyMethod property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getDestroyMethod() {
		return destroyMethod;
	}

	/**
	 * Sets the value of the destroyMethod property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setDestroyMethod(String value) {
		this.destroyMethod = value;
	}

	/**
	 * Gets the value of the factoryMethod property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getFactoryMethod() {
		return factoryMethod;
	}

	/**
	 * Sets the value of the factoryMethod property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setFactoryMethod(String value) {
		this.factoryMethod = value;
	}

	/**
	 * Gets the value of the factoryRef property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getFactoryRef() {
		return factoryRef;
	}

	/**
	 * Sets the value of the factoryRef property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setFactoryRef(String value) {
		this.factoryRef = value;
	}

	/**
	 * Gets the value of the scope property.
	 * 
	 * @return possible object is {@link String }
	 * 
	 */
	public String getScope() {
		return scope;
	}

	/**
	 * Sets the value of the scope property.
	 * 
	 * @param value
	 *            allowed object is {@link String }
	 * 
	 */
	public void setScope(String value) {
		this.scope = value;
	}

	/**
	 * Gets a map that contains attributes that aren't bound to any typed
	 * property on this class.
	 * 
	 * <p>
	 * the map is keyed by the name of the attribute and the value is the string
	 * value of the attribute.
	 * 
	 * the map returned by this method is live, and you can add new attribute by
	 * updating the map directly. Because of this design, there's no setter.
	 * 
	 * 
	 * @return always non-null
	 */
	public Map<QName, String> getOtherAttributes() {
		return otherAttributes;
	}

}
